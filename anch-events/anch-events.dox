/*! \page page_events AnCH events library documentation
 *
 * \tableofcontents
 *
 * \section evt_intro_seq Introduction
 *
 * AnCH events library aims to provide event programming facilities based on C++11 thread library.\n
 * It is based on C++ template. This is not a library but only header files.\n
 * \n
 * This library is based on observer/observable design pattern. So the base classes are \ref anch::events::Observer "anch::events::Observer<T>" and \ref anch::events::Observable "anch::events::Observable<T>".
 *
 * \section evt_req_sec Prerequisites
 *
 * - anch-utils header files
 * - pthread library
 *
 * \section evt_install_sec Installation
 *
 * TODO fill this section
 *
 * \section evt_concept_sec Conception
 *
 * AnCH events library is header files only. So you don't need to link to library.
 *
 * \subsection evt_concept_observ_sec Observer/Observable
 *
 * These are the AnCH events library main classes. These classes are template classes.\n
 * Specialization concerns the event type that observer and observable can manage. An Observable<type> can be observe by any Observer<type>.\n
 * \n
 * \ref anch::events::Observer "Observer" is pure virtual. The only method which has to be implemented is Observer<type>::notify(const type&).\n
 * Observers have to register and unregister themself to observable(s) by calling methods Observable<type>::addObserver(Observer<type>) and Observable<type>::removeObserver(Observer<type>). Each observable maintains an observers list to notify them.\n
 *\n
 * \ref anch::events::Observable "Observable" is fully implemented and ready to use. To notify observers, call method Observable<type>::notifyObservers(const type&).
 *
 * \subsection evt_concept_handler_sec Event handler
 *
 * \ref anch::events::EventHandler "EventHandler" is a template that aims to provide a way to inherits multiple times from Observer.\n
 * This class is based on the C++ curiously recurring pattern. Template parameters will be event type and observer implementation type. It implements the Observer<type>::notify(const type&) by calling the callback method passed as argument in constructor.\n
 * \n
 * EventHandler provides also a simple way to register the observer in global event management (see \ref evt_concept_eventbus_sec "Event bus") through its constructors.\n
 * \n
 * EventHandler may need EventBus: in order to initialize EventBus, you will have to call INIT_ANCH_EVENT_BUS macro somewhere in your source file.
 *
 * \subsection evt_concept_eventbus_sec Event bus
 *
 * \ref anch::events::EventBus "EventBus" provides a way to fire events in global way.\n
 * Methods are the same than Observable.\n
 * Every methods can be accessed in static or instance way. The static method are named similar to instance method with the first letter in upper case. You should use the instance because the static will always retrieved the EventBus instance through mutex.\n
 * \n
 * EventBus has an additional method compare to Observable: scheduleDeferred which allow to put an event in a queue which will be dequeued later in another thread.\n
 * \n
 * In order to initialize \ref anch::events::EventBus "EventBus", you will have to call INIT_ANCH_EVENT_BUS macro somewhere in your source file.
 *
 * \section evt_example_sec Examples
 *
 * You can read unitary tests in the test directory to have some other code example.
 *
 * \subsection evt_example_obs_sec Observer/Observable
 *
 * \code{.cpp}
#include "events/observable.hpp"
#include "events/observer.hpp"

#include <iostream>

class StrObserver: public anch::events::Observer<std::string> {
  void notify(const std::string& event) noexcept {
    std::cout << event << std::endl;
  }
};

int main(void) {
  anch::events::Observable<std::string> strObservable;
  StrObserver obs;
  strObservable.addObserver(obs);
  strObservable.notifyObservers("test");
  strObservable.removeObserver(obs);
  return 0;
}\endcode
 *
 * \subsection evt_example_handler_sec Event handler
 *
 * \code{.cpp}
#include "events/eventHandler.hpp"
#include "events/observable.hpp"
INIT_ANCH_EVENT_BUS;

#include <iostream>

class Type1 {
private:
  std::string _message;
public:
  Type1(const std::string& message): _message(message) { }
  inline const std::string& getMessage() const {
    return _message;
  }
};

template<typename Derived>
class Type1EventHandlerIface: public anch::events::EventHandler<Type1,Derived> {
public:
  Type1EventHandlerIface(): anch::events::EventHandler<Type1,Derived>(&Derived::onType1) { }
  virtual void onType1(const Type1& event) = 0;
};

class Type2 {
private:
  int _index;
public:
  Type2(int index): _index(index) { }
  inline int Index() const {
    return _index;
  }
};

template<typename Derived>
class Type2EventHandlerIface: public anch::events::EventHandler<Type2,Derived> {
public:
  Type2EventHandlerIface(): anch::events::EventHandler<Type2,Derived>(&Derived::onType2) { }
  virtual void onType2(const Type2& event) = 0;
};

class TypesEventHandler: public Type1EventHandlerIface<TypesEventHandler>, public Type2EventHandlerIface<TypesEventHandler> {
public:
  TypesEventHandler(): Type1EventHandlerIface<TypesEventHandler>(), Type2EventHandlerIface<TypesEventHandler>() { }
  virtual void onType1(const Type1& event) override {
    std::cout << "Type1: " << event.getMessage() << std::endl;
  }
  virtual void onType2(const Type2& event) override {
    std::cout << "Type2: " << event.Index() << std::endl;
  }
};

int main(void) {
  TypesEventHandler handler;
  anch::events::Observable<Type1> obs1;
  obs1.addObserver(handler);
  anch::events::Observable<Type2> obs2;
  obs2.addObserver(handler);

  obs1.notifyObservers(Type1("test"));
  obs2.notifyObservers(Type2(1));

  return 0;
}\endcode
 *
 * \subsection evt_example_eventbus_sec Event bus
 *
 * \code{.cpp}
#include "events/eventHandler.hpp"
#include "events/observable.hpp"
INIT_ANCH_EVENT_BUS;

#include <iostream>

class Type1 {
private:
  std::string _message;
public:
  Type1(const std::string& message): _message(message) { }
  inline const std::string& getMessage() const {
    return _message;
  }
};

template<typename Derived>
class Type1EventHandlerIface: public anch::events::EventHandler<Type1,Derived> {
public:
  Type1EventHandlerIface(): anch::events::EventHandler<Type1,Derived>(&Derived::onType1) { }
  virtual void onType1(const Type1& event) = 0;
};

class Type2 {
private:
  int _index;
public:
  Type2(int index): _index(index) { }
  inline int Index() const {
    return _index;
  }
};

template<typename Derived>
class Type2EventHandlerIface: public anch::events::EventHandler<Type2,Derived> {
public:
  Type2EventHandlerIface(): anch::events::EventHandler<Type2,Derived>(&Derived::onType2) { }
  virtual void onType2(const Type2& event) = 0;
};

class TypesEventHandler: public Type1EventHandlerIface<TypesEventHandler>, public Type2EventHandlerIface<TypesEventHandler> {
public:
  virtual void onType1(const Type1& event) override {
    std::cout << "Type1: " << event.getMessage() << std::endl;
  }
  virtual void onType2(const Type2& event) override {
    std::cout << "Type2: " << event.Index() << std::endl;
  }
};

int main(void) {
  TypesEventHandler handler;
  anch::events::EventBus<Type1>::AddObserver(handler);
  anch::events::EventBus<Type1>::ScheduleDeferred(Type1("test"));
  anch::events::EventBus<Type2>::AddObserver(handler);
  anch::events::EventBus<Type2>::FireEvent(Type2(1));
  anch::events::EventBus<Type1>::FireEvent(Type1("test 2"));
  return 0;
}\endcode
 *
 */
